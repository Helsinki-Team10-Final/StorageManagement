pickerUpdateItem: async (_, args) => {
        try {
          const authorize = await authorization(args.access_token, "picker")
          if (!authorize) throw { type: "CustomError", message: "Not authorize" }

          
          args.input.listItem.forEach(async (item) => { //pisang, semangka, nangka dsb
            let n = 0
            item.listPO.forEach(async (po,indexPO) => { //dari po mana aja di dapet
              let foundItem = await Item.findOneById(item.idItem)
              console.log(foundItem, 'index: ',indexPO)
              let foundPO = await PurchasingOrder.findById(po.idPO)
              let arrItems = [...foundPO.items]

              console.log('---------------',po.idPO,'console log per po: ',item.itemName,'---------------')
              console.log(foundPO.items)
              console.log('------------------------------')

              console.log(arrItems,'----> arr items temp')

              foundPO.items.forEach(async (itemPO, index) => {
                if (itemPO.name.toLowerCase() === item.itemName.toLowerCase()){
                  // console.log(arrItems[index].currentQuantity, '----', itemPO.name)
                  arrItems[index].currentQuantity -=  po.quantity
                  // console.log(arrItems[index].currentQuantity, '----', itemPO.name)
                  n+=po.quantity
                }
              })

              // console.log(arrItems,'------kondisi items di po 2')

              const payload = {
                items: [...arrItems],
                status: "clear",
                updatedAt: new Date()
              }
              console.log('-----data payload update')
              console.log(payload.items)


              const updatePO = await PurchasingOrder.updateCurrentQuantity(foundPO._id, payload)
              // console.log(updatePO.value.items,'------update po 3')
              foundPO = updatePO
              console.log('-----data hasil update')
              console.log(updatePO.value.items)

            // console.log(n)  
            const updateItem = await Item.updateOne(foundItem._id, foundItem.quantity-n)
            })
          })

          // update storearequest status
          const foundStoreReq = await StoreRequest.findById(args.idStoreReq)
          const payload = {
            status: 'picked',
            updatedAt: new Date()
          }
          const updatedStatusStoreReq = await StoreRequest.updateStatusFromAdmin(foundStoreReq._id, payload)

          // const deletedBroadcast = await Broadcast.deleteOne(args.input.idBroadcast)
          return "Request Successfully Handled"
        } catch (error) {
          console.log(error, '---> error')
          return new ApolloError("bad request", "404", err)
        }
      }























// async createBroadcastPicker(_,args) {
      //   try {
      //     const authorize = await authorization(args.access_token, "warehouseadmin")
      //     if (!authorize) throw { type: "CustomError", message: "Not authorize" }
      //     const foundStoreReq = await StoreRequest.findById(args.idStoreReq)

      //     //update status PO to checking
      //     const payload = {
      //       status: 'picking',
      //       updatedAt: new Date()
      //     }
      //     const updatedStatusStoreReq = await StoreRequest.updateStatusFromAdmin(foundStoreReq._id, payload)
      //     console.log(updatedStatusStoreReq)

      //     console.log(foundStoreReq)
      //     const broadcast = {
      //       storeRequest: updatedStatusStoreReq.value,
      //       role: "picker"
      //     }
      //     const newBroadcast = await Broadcast.create(broadcast)
      //     console.log(broadcast)
      //     return newBroadcast.ops[0]
      //   } catch (err) {
      //     console.log(err)
      //     return new ApolloError("bad request", "404", err)
      //   }
      // }






      // createBroadcastPicker: async (_, args) => {
      //   try {
      //     const authorize = await authorization(args.access_token, "buyer")
      //     if (!authorize) throw { type: "CustomError", message: "Not authorize" }
      //     const pickerLogin = decodedToken(access_token)
      //     const foundStoreReq = await StoreRequest.findById(args.idStoreReq)
      //     console.log(foundStoreReq)
      //     // const broadcast = {
      //     //   storeRequest: foundStoreReq,
      //     //   role: args.role
      //     // }
      //     // const newBroadcast = await Broadcast.create(broadcast)
      //     // // console.log(broadcast)
      //     // // return newBroadcast.ops[0]
      //     //create broadcast for picker
      //     const broadcast = {
      //       storeRequest: newStoreReq.ops[0],
      //       role: "picker"
      //     }
      //     const newBroadcast = await Broadcast.create(broadcast)
      //     // console.log(broadcast)
      //     // return newBroadcast.ops[0]
      //     return
      //   } catch (err) {
      //     console.log(err)
      //     return new ApolloError("bad request", "404", err)
      //   }
      // }